(function(){const F=document.createElement("link").relList;if(F&&F.supports&&F.supports("modulepreload"))return;for(const l of document.querySelectorAll('link[rel="modulepreload"]'))U(l);new MutationObserver(l=>{for(const V of l)if(V.type==="childList")for(const d of V.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&U(d)}).observe(document,{childList:!0,subtree:!0});function Q(l){const V={};return l.integrity&&(V.integrity=l.integrity),l.referrerPolicy&&(V.referrerPolicy=l.referrerPolicy),l.crossOrigin==="use-credentials"?V.credentials="include":l.crossOrigin==="anonymous"?V.credentials="omit":V.credentials="same-origin",V}function U(l){if(l.ep)return;l.ep=!0;const V=Q(l);fetch(l.href,V)}})();class r{constructor(F=0,Q=0,U=0){this.x=F,this.y=Q,this.z=U}equals(F){return this.x===F.x&&this.y===F.y&&this.z===F.z}add(F){return typeof F=="number"?new r(this.x+F,this.y+F,this.z+F):new r(this.x+F.x,this.y+F.y,this.z+F.z)}subtract(F){return typeof F=="number"?new r(this.x-F,this.y-F,this.z-F):new r(this.x-F.x,this.y-F.y,this.z-F.z)}multiply(F){return typeof F=="number"?new r(this.x*F,this.y*F,this.z*F):F instanceof r?new r(this.x*F.x,this.y*F.y,this.z*F.z):new r(this.x*F.buffer[0]+this.y*F.buffer[4]+this.z*F.buffer[8]+F.buffer[12],this.x*F.buffer[1]+this.y*F.buffer[5]+this.z*F.buffer[9]+F.buffer[13],this.x*F.buffer[2]+this.y*F.buffer[6]+this.z*F.buffer[10]+F.buffer[14])}divide(F){return typeof F=="number"?new r(this.x/F,this.y/F,this.z/F):new r(this.x/F.x,this.y/F.y,this.z/F.z)}cross(F){const Q=this.y*F.z-this.z*F.y,U=this.z*F.x-this.x*F.z,l=this.x*F.y-this.y*F.x;return new r(Q,U,l)}dot(F){return this.x*F.x+this.y*F.y+this.z*F.z}lerp(F,Q){return new r(this.x+(F.x-this.x)*Q,this.y+(F.y-this.y)*Q,this.z+(F.z-this.z)*Q)}min(F){return new r(Math.min(this.x,F.x),Math.min(this.y,F.y),Math.min(this.z,F.z))}max(F){return new r(Math.max(this.x,F.x),Math.max(this.y,F.y),Math.max(this.z,F.z))}getComponent(F){switch(F){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(`Invalid component index: ${F}`)}}minComponent(){return this.x<this.y&&this.x<this.z?0:this.y<this.z?1:2}maxComponent(){return this.x>this.y&&this.x>this.z?0:this.y>this.z?1:2}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(F){return Math.sqrt((this.x-F.x)**2+(this.y-F.y)**2+(this.z-F.z)**2)}normalize(){const F=this.magnitude();return new r(this.x/F,this.y/F,this.z/F)}flat(){return[this.x,this.y,this.z]}clone(){return new r(this.x,this.y,this.z)}toString(){return`[${this.flat().join(", ")}]`}static One(F=1){return new r(F,F,F)}}class M{constructor(F=0,Q=0,U=0,l=1){this.x=F,this.y=Q,this.z=U,this.w=l}equals(F){return this.x===F.x&&this.y===F.y&&this.z===F.z&&this.w===F.w}normalize(){const F=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new M(this.x/F,this.y/F,this.z/F,this.w/F)}multiply(F){const Q=this.w,U=this.x,l=this.y,V=this.z,d=F.w,t=F.x,n=F.y,A=F.z;return new M(Q*t+U*d+l*A-V*n,Q*n-U*A+l*d+V*t,Q*A+U*n-l*t+V*d,Q*d-U*t-l*n-V*A)}inverse(){const F=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new M(-this.x/F,-this.y/F,-this.z/F,this.w/F)}apply(F){const Q=new M(F.x,F.y,F.z,0),U=new M(-this.x,-this.y,-this.z,this.w),l=this.multiply(Q).multiply(U);return new r(l.x,l.y,l.z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new M(this.x,this.y,this.z,this.w)}static FromEuler(F){const Q=F.x/2,U=F.y/2,l=F.z/2,V=Math.cos(U),d=Math.sin(U),t=Math.cos(Q),n=Math.sin(Q),A=Math.cos(l),B=Math.sin(l);return new M(V*n*A+d*t*B,d*t*A-V*n*B,V*t*B-d*n*A,V*t*A+d*n*B)}toEuler(){const F=2*(this.w*this.x+this.y*this.z),Q=1-2*(this.x*this.x+this.y*this.y),U=Math.atan2(F,Q);let l;const V=2*(this.w*this.y-this.z*this.x);l=Math.abs(V)>=1?Math.sign(V)*Math.PI/2:Math.asin(V);const d=2*(this.w*this.z+this.x*this.y),t=1-2*(this.y*this.y+this.z*this.z),n=Math.atan2(d,t);return new r(U,l,n)}static FromMatrix3(F){const Q=F.buffer,U=Q[0]+Q[4]+Q[8];let l,V,d,t;if(U>0){const n=.5/Math.sqrt(U+1);t=.25/n,l=(Q[7]-Q[5])*n,V=(Q[2]-Q[6])*n,d=(Q[3]-Q[1])*n}else if(Q[0]>Q[4]&&Q[0]>Q[8]){const n=2*Math.sqrt(1+Q[0]-Q[4]-Q[8]);t=(Q[7]-Q[5])/n,l=.25*n,V=(Q[1]+Q[3])/n,d=(Q[2]+Q[6])/n}else if(Q[4]>Q[8]){const n=2*Math.sqrt(1+Q[4]-Q[0]-Q[8]);t=(Q[2]-Q[6])/n,l=(Q[1]+Q[3])/n,V=.25*n,d=(Q[5]+Q[7])/n}else{const n=2*Math.sqrt(1+Q[8]-Q[0]-Q[4]);t=(Q[3]-Q[1])/n,l=(Q[2]+Q[6])/n,V=(Q[5]+Q[7])/n,d=.25*n}return new M(l,V,d,t)}static FromAxisAngle(F,Q){const U=Q/2,l=Math.sin(U),V=Math.cos(U);return new M(F.x*l,F.y*l,F.z*l,V)}static LookRotation(F){const Q=new r(0,0,1),U=Q.dot(F);if(Math.abs(U- -1)<1e-6)return new M(0,1,0,Math.PI);if(Math.abs(U-1)<1e-6)return new M;const l=Math.acos(U),V=Q.cross(F).normalize();return M.FromAxisAngle(V,l)}toString(){return`[${this.flat().join(", ")}]`}}class GF{constructor(){const F=new Map;this.addEventListener=(Q,U)=>{F.has(Q)||F.set(Q,new Set),F.get(Q).add(U)},this.removeEventListener=(Q,U)=>{F.has(Q)&&F.get(Q).delete(U)},this.hasEventListener=(Q,U)=>!!F.has(Q)&&F.get(Q).has(U),this.dispatchEvent=Q=>{if(F.has(Q.type))for(const U of F.get(Q.type))U(Q)}}}class tF{constructor(F=1,Q=0,U=0,l=0,V=0,d=1,t=0,n=0,A=0,B=0,R=1,h=0,o=0,c=0,g=0,b=1){this.buffer=[F,Q,U,l,V,d,t,n,A,B,R,h,o,c,g,b]}equals(F){if(this.buffer.length!==F.buffer.length)return!1;if(this.buffer===F.buffer)return!0;for(let Q=0;Q<this.buffer.length;Q++)if(this.buffer[Q]!==F.buffer[Q])return!1;return!0}multiply(F){const Q=this.buffer,U=F.buffer;return new tF(U[0]*Q[0]+U[1]*Q[4]+U[2]*Q[8]+U[3]*Q[12],U[0]*Q[1]+U[1]*Q[5]+U[2]*Q[9]+U[3]*Q[13],U[0]*Q[2]+U[1]*Q[6]+U[2]*Q[10]+U[3]*Q[14],U[0]*Q[3]+U[1]*Q[7]+U[2]*Q[11]+U[3]*Q[15],U[4]*Q[0]+U[5]*Q[4]+U[6]*Q[8]+U[7]*Q[12],U[4]*Q[1]+U[5]*Q[5]+U[6]*Q[9]+U[7]*Q[13],U[4]*Q[2]+U[5]*Q[6]+U[6]*Q[10]+U[7]*Q[14],U[4]*Q[3]+U[5]*Q[7]+U[6]*Q[11]+U[7]*Q[15],U[8]*Q[0]+U[9]*Q[4]+U[10]*Q[8]+U[11]*Q[12],U[8]*Q[1]+U[9]*Q[5]+U[10]*Q[9]+U[11]*Q[13],U[8]*Q[2]+U[9]*Q[6]+U[10]*Q[10]+U[11]*Q[14],U[8]*Q[3]+U[9]*Q[7]+U[10]*Q[11]+U[11]*Q[15],U[12]*Q[0]+U[13]*Q[4]+U[14]*Q[8]+U[15]*Q[12],U[12]*Q[1]+U[13]*Q[5]+U[14]*Q[9]+U[15]*Q[13],U[12]*Q[2]+U[13]*Q[6]+U[14]*Q[10]+U[15]*Q[14],U[12]*Q[3]+U[13]*Q[7]+U[14]*Q[11]+U[15]*Q[15])}clone(){const F=this.buffer;return new tF(F[0],F[1],F[2],F[3],F[4],F[5],F[6],F[7],F[8],F[9],F[10],F[11],F[12],F[13],F[14],F[15])}determinant(){const F=this.buffer;return F[12]*F[9]*F[6]*F[3]-F[8]*F[13]*F[6]*F[3]-F[12]*F[5]*F[10]*F[3]+F[4]*F[13]*F[10]*F[3]+F[8]*F[5]*F[14]*F[3]-F[4]*F[9]*F[14]*F[3]-F[12]*F[9]*F[2]*F[7]+F[8]*F[13]*F[2]*F[7]+F[12]*F[1]*F[10]*F[7]-F[0]*F[13]*F[10]*F[7]-F[8]*F[1]*F[14]*F[7]+F[0]*F[9]*F[14]*F[7]+F[12]*F[5]*F[2]*F[11]-F[4]*F[13]*F[2]*F[11]-F[12]*F[1]*F[6]*F[11]+F[0]*F[13]*F[6]*F[11]+F[4]*F[1]*F[14]*F[11]-F[0]*F[5]*F[14]*F[11]-F[8]*F[5]*F[2]*F[15]+F[4]*F[9]*F[2]*F[15]+F[8]*F[1]*F[6]*F[15]-F[0]*F[9]*F[6]*F[15]-F[4]*F[1]*F[10]*F[15]+F[0]*F[5]*F[10]*F[15]}invert(){const F=this.buffer,Q=this.determinant();if(Q===0)throw new Error("Matrix is not invertible.");const U=1/Q;return new tF(U*(F[5]*F[10]*F[15]-F[5]*F[11]*F[14]-F[9]*F[6]*F[15]+F[9]*F[7]*F[14]+F[13]*F[6]*F[11]-F[13]*F[7]*F[10]),U*(-F[1]*F[10]*F[15]+F[1]*F[11]*F[14]+F[9]*F[2]*F[15]-F[9]*F[3]*F[14]-F[13]*F[2]*F[11]+F[13]*F[3]*F[10]),U*(F[1]*F[6]*F[15]-F[1]*F[7]*F[14]-F[5]*F[2]*F[15]+F[5]*F[3]*F[14]+F[13]*F[2]*F[7]-F[13]*F[3]*F[6]),U*(-F[1]*F[6]*F[11]+F[1]*F[7]*F[10]+F[5]*F[2]*F[11]-F[5]*F[3]*F[10]-F[9]*F[2]*F[7]+F[9]*F[3]*F[6]),U*(-F[4]*F[10]*F[15]+F[4]*F[11]*F[14]+F[8]*F[6]*F[15]-F[8]*F[7]*F[14]-F[12]*F[6]*F[11]+F[12]*F[7]*F[10]),U*(F[0]*F[10]*F[15]-F[0]*F[11]*F[14]-F[8]*F[2]*F[15]+F[8]*F[3]*F[14]+F[12]*F[2]*F[11]-F[12]*F[3]*F[10]),U*(-F[0]*F[6]*F[15]+F[0]*F[7]*F[14]+F[4]*F[2]*F[15]-F[4]*F[3]*F[14]-F[12]*F[2]*F[7]+F[12]*F[3]*F[6]),U*(F[0]*F[6]*F[11]-F[0]*F[7]*F[10]-F[4]*F[2]*F[11]+F[4]*F[3]*F[10]+F[8]*F[2]*F[7]-F[8]*F[3]*F[6]),U*(F[4]*F[9]*F[15]-F[4]*F[11]*F[13]-F[8]*F[5]*F[15]+F[8]*F[7]*F[13]+F[12]*F[5]*F[11]-F[12]*F[7]*F[9]),U*(-F[0]*F[9]*F[15]+F[0]*F[11]*F[13]+F[8]*F[1]*F[15]-F[8]*F[3]*F[13]-F[12]*F[1]*F[11]+F[12]*F[3]*F[9]),U*(F[0]*F[5]*F[15]-F[0]*F[7]*F[13]-F[4]*F[1]*F[15]+F[4]*F[3]*F[13]+F[12]*F[1]*F[7]-F[12]*F[3]*F[5]),U*(-F[0]*F[5]*F[11]+F[0]*F[7]*F[9]+F[4]*F[1]*F[11]-F[4]*F[3]*F[9]-F[8]*F[1]*F[7]+F[8]*F[3]*F[5]),U*(-F[4]*F[9]*F[14]+F[4]*F[10]*F[13]+F[8]*F[5]*F[14]-F[8]*F[6]*F[13]-F[12]*F[5]*F[10]+F[12]*F[6]*F[9]),U*(F[0]*F[9]*F[14]-F[0]*F[10]*F[13]-F[8]*F[1]*F[14]+F[8]*F[2]*F[13]+F[12]*F[1]*F[10]-F[12]*F[2]*F[9]),U*(-F[0]*F[5]*F[14]+F[0]*F[6]*F[13]+F[4]*F[1]*F[14]-F[4]*F[2]*F[13]-F[12]*F[1]*F[6]+F[12]*F[2]*F[5]),U*(F[0]*F[5]*F[10]-F[0]*F[6]*F[9]-F[4]*F[1]*F[10]+F[4]*F[2]*F[9]+F[8]*F[1]*F[6]-F[8]*F[2]*F[5]))}static Compose(F,Q,U){const l=Q.x,V=Q.y,d=Q.z,t=Q.w,n=l+l,A=V+V,B=d+d,R=l*n,h=l*A,o=l*B,c=V*A,g=V*B,b=d*B,G=t*n,N=t*A,f=t*B,j=U.x,D=U.y,w=U.z;return new tF((1-(c+b))*j,(h+f)*j,(o-N)*j,0,(h-f)*D,(1-(R+b))*D,(g+G)*D,0,(o+N)*w,(g-G)*w,(1-(R+c))*w,0,F.x,F.y,F.z,1)}toString(){return`[${this.buffer.join(", ")}]`}}class jF extends Event{constructor(F){super("objectAdded"),this.object=F}}class OF extends Event{constructor(F){super("objectRemoved"),this.object=F}}class PF extends Event{constructor(F){super("objectChanged"),this.object=F}}class EF extends GF{constructor(){super(),this.positionChanged=!1,this.rotationChanged=!1,this.scaleChanged=!1,this._position=new r,this._rotation=new M,this._scale=new r(1,1,1),this._transform=new tF,this._changeEvent=new PF(this),this.update=()=>{},this.applyPosition=()=>{this.position=new r},this.applyRotation=()=>{this.rotation=new M},this.applyScale=()=>{this.scale=new r(1,1,1)},this.raiseChangeEvent=()=>{this.dispatchEvent(this._changeEvent)}}_updateMatrix(){this._transform=tF.Compose(this._position,this._rotation,this._scale)}get position(){return this._position}set position(F){this._position.equals(F)||(this._position=F,this.positionChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(F){this._rotation.equals(F)||(this._rotation=F,this.rotationChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get scale(){return this._scale}set scale(F){this._scale.equals(F)||(this._scale=F,this.scaleChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get forward(){let F=new r(0,0,1);return F=this.rotation.apply(F),F}get transform(){return this._transform}}class dF{constructor(F=1,Q=0,U=0,l=0,V=1,d=0,t=0,n=0,A=1){this.buffer=[F,Q,U,l,V,d,t,n,A]}equals(F){if(this.buffer.length!==F.buffer.length)return!1;if(this.buffer===F.buffer)return!0;for(let Q=0;Q<this.buffer.length;Q++)if(this.buffer[Q]!==F.buffer[Q])return!1;return!0}multiply(F){const Q=this.buffer,U=F.buffer;return new dF(U[0]*Q[0]+U[3]*Q[1]+U[6]*Q[2],U[1]*Q[0]+U[4]*Q[1]+U[7]*Q[2],U[2]*Q[0]+U[5]*Q[1]+U[8]*Q[2],U[0]*Q[3]+U[3]*Q[4]+U[6]*Q[5],U[1]*Q[3]+U[4]*Q[4]+U[7]*Q[5],U[2]*Q[3]+U[5]*Q[4]+U[8]*Q[5],U[0]*Q[6]+U[3]*Q[7]+U[6]*Q[8],U[1]*Q[6]+U[4]*Q[7]+U[7]*Q[8],U[2]*Q[6]+U[5]*Q[7]+U[8]*Q[8])}clone(){const F=this.buffer;return new dF(F[0],F[1],F[2],F[3],F[4],F[5],F[6],F[7],F[8])}static Eye(F=1){return new dF(F,0,0,0,F,0,0,0,F)}static Diagonal(F){return new dF(F.x,0,0,0,F.y,0,0,0,F.z)}static RotationFromQuaternion(F){return new dF(1-2*F.y*F.y-2*F.z*F.z,2*F.x*F.y-2*F.z*F.w,2*F.x*F.z+2*F.y*F.w,2*F.x*F.y+2*F.z*F.w,1-2*F.x*F.x-2*F.z*F.z,2*F.y*F.z-2*F.x*F.w,2*F.x*F.z-2*F.y*F.w,2*F.y*F.z+2*F.x*F.w,1-2*F.x*F.x-2*F.y*F.y)}static RotationFromEuler(F){const Q=Math.cos(F.x),U=Math.sin(F.x),l=Math.cos(F.y),V=Math.sin(F.y),d=Math.cos(F.z),t=Math.sin(F.z);return new dF(l*d+V*U*t,-l*t+V*U*d,V*Q,Q*t,Q*d,-U,-V*d+l*U*t,V*t+l*U*d,l*Q)}toString(){return`[${this.buffer.join(", ")}]`}}class QF{constructor(F=0,Q=null,U=null,l=null,V=null){this.changed=!1,this.detached=!1,this._vertexCount=F,this._positions=Q||new Float32Array(0),this._rotations=U||new Float32Array(0),this._scales=l||new Float32Array(0),this._colors=V||new Uint8Array(0),this._selection=new Uint8Array(this.vertexCount),this.translate=d=>{for(let t=0;t<this.vertexCount;t++)this.positions[3*t+0]+=d.x,this.positions[3*t+1]+=d.y,this.positions[3*t+2]+=d.z;this.changed=!0},this.rotate=d=>{const t=dF.RotationFromQuaternion(d).buffer;for(let n=0;n<this.vertexCount;n++){const A=this.positions[3*n+0],B=this.positions[3*n+1],R=this.positions[3*n+2];this.positions[3*n+0]=t[0]*A+t[1]*B+t[2]*R,this.positions[3*n+1]=t[3]*A+t[4]*B+t[5]*R,this.positions[3*n+2]=t[6]*A+t[7]*B+t[8]*R;const h=new M(this.rotations[4*n+1],this.rotations[4*n+2],this.rotations[4*n+3],this.rotations[4*n+0]),o=d.multiply(h);this.rotations[4*n+1]=o.x,this.rotations[4*n+2]=o.y,this.rotations[4*n+3]=o.z,this.rotations[4*n+0]=o.w}this.changed=!0},this.scale=d=>{for(let t=0;t<this.vertexCount;t++)this.positions[3*t+0]*=d.x,this.positions[3*t+1]*=d.y,this.positions[3*t+2]*=d.z,this.scales[3*t+0]*=d.x,this.scales[3*t+1]*=d.y,this.scales[3*t+2]*=d.z;this.changed=!0},this.serialize=()=>{const d=new Uint8Array(this.vertexCount*QF.RowLength),t=new Float32Array(d.buffer),n=new Uint8Array(d.buffer);for(let A=0;A<this.vertexCount;A++)t[8*A+0]=this.positions[3*A+0],t[8*A+1]=this.positions[3*A+1],t[8*A+2]=this.positions[3*A+2],n[32*A+24+0]=this.colors[4*A+0],n[32*A+24+1]=this.colors[4*A+1],n[32*A+24+2]=this.colors[4*A+2],n[32*A+24+3]=this.colors[4*A+3],t[8*A+3+0]=this.scales[3*A+0],t[8*A+3+1]=this.scales[3*A+1],t[8*A+3+2]=this.scales[3*A+2],n[32*A+28+0]=128*this.rotations[4*A+0]+128&255,n[32*A+28+1]=128*this.rotations[4*A+1]+128&255,n[32*A+28+2]=128*this.rotations[4*A+2]+128&255,n[32*A+28+3]=128*this.rotations[4*A+3]+128&255;return d},this.reattach=(d,t,n,A,B)=>{console.assert(d.byteLength===3*this.vertexCount*4,`Expected ${3*this.vertexCount*4} bytes, got ${d.byteLength} bytes`),this._positions=new Float32Array(d),this._rotations=new Float32Array(t),this._scales=new Float32Array(n),this._colors=new Uint8Array(A),this._selection=new Uint8Array(B),this.detached=!1}}static Deserialize(F){const Q=F.length/QF.RowLength,U=new Float32Array(3*Q),l=new Float32Array(4*Q),V=new Float32Array(3*Q),d=new Uint8Array(4*Q),t=new Float32Array(F.buffer),n=new Uint8Array(F.buffer);for(let A=0;A<Q;A++)U[3*A+0]=t[8*A+0],U[3*A+1]=t[8*A+1],U[3*A+2]=t[8*A+2],l[4*A+0]=(n[32*A+28+0]-128)/128,l[4*A+1]=(n[32*A+28+1]-128)/128,l[4*A+2]=(n[32*A+28+2]-128)/128,l[4*A+3]=(n[32*A+28+3]-128)/128,V[3*A+0]=t[8*A+3+0],V[3*A+1]=t[8*A+3+1],V[3*A+2]=t[8*A+3+2],d[4*A+0]=n[32*A+24+0],d[4*A+1]=n[32*A+24+1],d[4*A+2]=n[32*A+24+2],d[4*A+3]=n[32*A+24+3];return new QF(Q,U,l,V,d)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}get selection(){return this._selection}}QF.RowLength=32;class aF{static SplatToPLY(F,Q){let U=`ply
format binary_little_endian 1.0
`;U+=`element vertex ${Q}
`;const l=["x","y","z","nx","ny","nz","f_dc_0","f_dc_1","f_dc_2"];for(let c=0;c<45;c++)l.push(`f_rest_${c}`);l.push("opacity"),l.push("scale_0"),l.push("scale_1"),l.push("scale_2"),l.push("rot_0"),l.push("rot_1"),l.push("rot_2"),l.push("rot_3");for(const c of l)U+=`property float ${c}
`;U+=`end_header
`;const V=new TextEncoder().encode(U),d=248,t=Q*d,n=new DataView(new ArrayBuffer(V.length+t));new Uint8Array(n.buffer).set(V,0);const A=new Float32Array(F),B=new Uint8Array(F),R=V.length,h=220,o=232;for(let c=0;c<Q;c++){const g=A[8*c+0],b=A[8*c+1],G=A[8*c+2],N=(B[32*c+24+0]/255-.5)/this.SH_C0,f=(B[32*c+24+1]/255-.5)/this.SH_C0,j=(B[32*c+24+2]/255-.5)/this.SH_C0,D=B[32*c+24+3]/255,w=Math.log(D/(1-D)),T=Math.log(A[8*c+3+0]),L=Math.log(A[8*c+3+1]),E=Math.log(A[8*c+3+2]);let Y=new M((B[32*c+28+1]-128)/128,(B[32*c+28+2]-128)/128,(B[32*c+28+3]-128)/128,(B[32*c+28+0]-128)/128);Y=Y.normalize();const FF=Y.w,p=Y.x,k=Y.y,nF=Y.z;n.setFloat32(R+d*c+0,g,!0),n.setFloat32(R+d*c+4,b,!0),n.setFloat32(R+d*c+8,G,!0),n.setFloat32(R+d*c+24+0,N,!0),n.setFloat32(R+d*c+24+4,f,!0),n.setFloat32(R+d*c+24+8,j,!0),n.setFloat32(R+d*c+216,w,!0),n.setFloat32(R+d*c+h+0,T,!0),n.setFloat32(R+d*c+h+4,L,!0),n.setFloat32(R+d*c+h+8,E,!0),n.setFloat32(R+d*c+o+0,FF,!0),n.setFloat32(R+d*c+o+4,p,!0),n.setFloat32(R+d*c+o+8,k,!0),n.setFloat32(R+d*c+o+12,nF,!0)}return n.buffer}}aF.SH_C0=.28209479177387814;class rF{constructor(F,Q){this.min=F,this.max=Q}contains(F){return F.x>=this.min.x&&F.x<=this.max.x&&F.y>=this.min.y&&F.y<=this.max.y&&F.z>=this.min.z&&F.z<=this.max.z}intersects(F){return this.max.x>=F.min.x&&this.min.x<=F.max.x&&this.max.y>=F.min.y&&this.min.y<=F.max.y&&this.max.z>=F.min.z&&this.min.z<=F.max.z}size(){return this.max.subtract(this.min)}center(){return this.min.add(this.max).divide(2)}expand(F){this.min=this.min.min(F),this.max=this.max.max(F)}permute(){const F=this.min,Q=this.max;this.min=new r(Math.min(F.x,Q.x),Math.min(F.y,Q.y),Math.min(F.z,Q.z)),this.max=new r(Math.max(F.x,Q.x),Math.max(F.y,Q.y),Math.max(F.z,Q.z))}}class VF extends EF{constructor(F=void 0){super(),this.selectedChanged=!1,this.colorTransformChanged=!1,this._selected=!1,this._colorTransforms=[],this._colorTransformsMap=new Map,this._data=F||new QF,this._bounds=new rF(new r(1/0,1/0,1/0),new r(-1/0,-1/0,-1/0)),this.recalculateBounds=()=>{this._bounds=new rF(new r(1/0,1/0,1/0),new r(-1/0,-1/0,-1/0));for(let Q=0;Q<this._data.vertexCount;Q++)this._bounds.expand(new r(this._data.positions[3*Q],this._data.positions[3*Q+1],this._data.positions[3*Q+2]))},this.applyPosition=()=>{this.data.translate(this.position),this.position=new r},this.applyRotation=()=>{this.data.rotate(this.rotation),this.rotation=new M},this.applyScale=()=>{this.data.scale(this.scale),this.scale=new r(1,1,1)},this.recalculateBounds()}saveToFile(F=null,Q=null){if(!document)return;if(Q){if(Q!=="splat"&&Q!=="ply")throw new Error("Invalid format. Must be 'splat' or 'ply'")}else Q="splat";if(!F){const d=new Date;F=`splat-${d.getFullYear()}-${d.getMonth()+1}-${d.getDate()}.${Q}`}this.applyRotation(),this.applyScale(),this.applyPosition();const U=this.data.serialize();let l;if(Q==="ply"){const d=aF.SplatToPLY(U.buffer,this.data.vertexCount);l=new Blob([d],{type:"application/octet-stream"})}else l=new Blob([U.buffer],{type:"application/octet-stream"});const V=document.createElement("a");V.download=F,V.href=URL.createObjectURL(l),V.click()}get data(){return this._data}get selected(){return this._selected}set selected(F){this._selected!==F&&(this._selected=F,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent))}get colorTransforms(){return this._colorTransforms}get colorTransformsMap(){return this._colorTransformsMap}get bounds(){let F=this._bounds.center();F=F.add(this.position);let Q=this._bounds.size();return Q=Q.multiply(this.scale),new rF(F.subtract(Q.divide(2)),F.add(Q.divide(2)))}}class LF{constructor(){this._fx=1132,this._fy=1132,this._near=.1,this._far=100,this._width=512,this._height=512,this._projectionMatrix=new tF,this._viewMatrix=new tF,this._viewProj=new tF,this._updateProjectionMatrix=()=>{this._projectionMatrix=new tF(2*this.fx/this.width,0,0,0,0,-2*this.fy/this.height,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.update=(F,Q)=>{const U=dF.RotationFromQuaternion(Q).buffer,l=F.flat();this._viewMatrix=new tF(U[0],U[1],U[2],0,U[3],U[4],U[5],0,U[6],U[7],U[8],0,-l[0]*U[0]-l[1]*U[3]-l[2]*U[6],-l[0]*U[1]-l[1]*U[4]-l[2]*U[7],-l[0]*U[2]-l[1]*U[5]-l[2]*U[8],1),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.setSize=(F,Q)=>{this._width=F,this._height=Q,this._updateProjectionMatrix()}}get fx(){return this._fx}set fx(F){this._fx!==F&&(this._fx=F,this._updateProjectionMatrix())}get fy(){return this._fy}set fy(F){this._fy!==F&&(this._fy=F,this._updateProjectionMatrix())}get near(){return this._near}set near(F){this._near!==F&&(this._near=F,this._updateProjectionMatrix())}get far(){return this._far}set far(F){this._far!==F&&(this._far=F,this._updateProjectionMatrix())}get width(){return this._width}get height(){return this._height}get projectionMatrix(){return this._projectionMatrix}get viewMatrix(){return this._viewMatrix}get viewProj(){return this._viewProj}}class lF{constructor(F=0,Q=0,U=0,l=0){this.x=F,this.y=Q,this.z=U,this.w=l}equals(F){return this.x===F.x&&this.y===F.y&&this.z===F.z&&this.w===F.w}add(F){return typeof F=="number"?new lF(this.x+F,this.y+F,this.z+F,this.w+F):new lF(this.x+F.x,this.y+F.y,this.z+F.z,this.w+F.w)}subtract(F){return typeof F=="number"?new lF(this.x-F,this.y-F,this.z-F,this.w-F):new lF(this.x-F.x,this.y-F.y,this.z-F.z,this.w-F.w)}multiply(F){return typeof F=="number"?new lF(this.x*F,this.y*F,this.z*F,this.w*F):F instanceof lF?new lF(this.x*F.x,this.y*F.y,this.z*F.z,this.w*F.w):new lF(this.x*F.buffer[0]+this.y*F.buffer[4]+this.z*F.buffer[8]+this.w*F.buffer[12],this.x*F.buffer[1]+this.y*F.buffer[5]+this.z*F.buffer[9]+this.w*F.buffer[13],this.x*F.buffer[2]+this.y*F.buffer[6]+this.z*F.buffer[10]+this.w*F.buffer[14],this.x*F.buffer[3]+this.y*F.buffer[7]+this.z*F.buffer[11]+this.w*F.buffer[15])}dot(F){return this.x*F.x+this.y*F.y+this.z*F.z+this.w*F.w}lerp(F,Q){return new lF(this.x+(F.x-this.x)*Q,this.y+(F.y-this.y)*Q,this.z+(F.z-this.z)*Q,this.w+(F.w-this.w)*Q)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}distanceTo(F){return Math.sqrt((this.x-F.x)**2+(this.y-F.y)**2+(this.z-F.z)**2+(this.w-F.w)**2)}normalize(){const F=this.magnitude();return new lF(this.x/F,this.y/F,this.z/F,this.w/F)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new lF(this.x,this.y,this.z,this.w)}toString(){return`[${this.flat().join(", ")}]`}}class _F extends EF{constructor(F=void 0){super(),this._data=F||new LF,this._position=new r(0,0,-5),this.update=()=>{this.data.update(this.position,this.rotation)},this.screenPointToRay=(Q,U)=>{const l=new lF(Q,U,-1,1),V=this._data.projectionMatrix.invert(),d=l.multiply(V),t=this._data.viewMatrix.invert(),n=d.multiply(t);return new r(n.x/n.w,n.y/n.w,n.z/n.w).subtract(this.position).normalize()}}get data(){return this._data}}class qF extends GF{constructor(){super(),this._objects=[],this.addObject=F=>{this.objects.push(F),this.dispatchEvent(new jF(F))},this.removeObject=F=>{const Q=this.objects.indexOf(F);if(Q<0)throw new Error("Object not found in scene");this.objects.splice(Q,1),this.dispatchEvent(new OF(F))},this.findObject=F=>{for(const Q of this.objects)if(F(Q))return Q},this.findObjectOfType=F=>{for(const Q of this.objects)if(Q instanceof F)return Q},this.reset=()=>{const F=this.objects.slice();for(const Q of F)this.removeObject(Q)},this.reset()}saveToFile(F=null,Q=null){if(!document)return;if(Q){if(Q!=="splat"&&Q!=="ply")throw new Error("Invalid format. Must be 'splat' or 'ply'")}else Q="splat";if(!F){const A=new Date;F=`scene-${A.getFullYear()}-${A.getMonth()+1}-${A.getDate()}.${Q}`}const U=[];let l=0;for(const A of this.objects)if(A.applyRotation(),A.applyScale(),A.applyPosition(),A instanceof VF){const B=A.data.serialize();U.push(B),l+=A.data.vertexCount}const V=new Uint8Array(l*QF.RowLength);let d,t=0;for(const A of U)V.set(A,t),t+=A.length;if(Q==="ply"){const A=aF.SplatToPLY(V.buffer,l);d=new Blob([A],{type:"application/octet-stream"})}else d=new Blob([V.buffer],{type:"application/octet-stream"});const n=document.createElement("a");n.download=F,n.href=URL.createObjectURL(d),n.click()}get objects(){return this._objects}}async function $F(X,F){const Q=await fetch(X,{mode:"cors",credentials:"omit",cache:F?"force-cache":"default"});if(Q.status!=200)throw new Error(Q.status+" Unable to load "+Q.url);return Q}async function FU(X,F){return X.headers.has("content-length")?async function(Q,U){const l=Q.body.getReader(),V=parseInt(Q.headers.get("content-length")),d=new Uint8Array(V);let t=0;for(;;){const{done:n,value:A}=await l.read();if(n)break;d.set(A,t),t+=A.length,U==null||U(t/V)}return d}(X,F):async function(Q,U){const l=Q.body.getReader(),V=[];let d=0;for(;;){const{done:A,value:B}=await l.read();if(A)break;V.push(B),d+=B.length}const t=new Uint8Array(d);let n=0;for(const A of V)t.set(A,n),n+=A.length,U==null||U(n/d);return t}(X,F)}class UU{static async LoadAsync(F,Q,U,l="",V=!1){const d=await $F(F,V),t=await FU(d,U);if(t[0]!==112||t[1]!==108||t[2]!==121||t[3]!==10)throw new Error("Invalid PLY file");return this.LoadFromArrayBuffer(t.buffer,Q,l)}static async LoadFromFileAsync(F,Q,U,l=""){const V=new FileReader;let d=new VF;return V.onload=t=>{d=this.LoadFromArrayBuffer(t.target.result,Q,l)},V.onprogress=t=>{U==null||U(t.loaded/t.total)},V.readAsArrayBuffer(F),await new Promise(t=>{V.onloadend=()=>{t()}}),d}static LoadFromArrayBuffer(F,Q,U=""){const l=new Uint8Array(this._ParsePLYBuffer(F,U)),V=QF.Deserialize(l),d=new VF(V);return Q.addObject(d),d}static _ParsePLYBuffer(F,Q){const U=new Uint8Array(F),l=new TextDecoder().decode(U.slice(0,10240)),V=`end_header
`,d=l.indexOf(V);if(d<0)throw new Error("Unable to read .ply file header");const t=parseInt(/element vertex (\d+)\n/.exec(l)[1]);let n=0;const A={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},B=[];for(const c of l.slice(0,d).split(`
`).filter(g=>g.startsWith("property "))){const[g,b,G]=c.split(" ");if(B.push({name:G,type:b,offset:n}),!A[b])throw new Error(`Unsupported property type: ${b}`);n+=A[b]}const R=new DataView(F,d+11),h=new ArrayBuffer(QF.RowLength*t),o=M.FromEuler(new r(Math.PI/2,0,0));for(let c=0;c<t;c++){const g=new Float32Array(h,c*QF.RowLength,3),b=new Float32Array(h,c*QF.RowLength+12,3),G=new Uint8ClampedArray(h,c*QF.RowLength+24,4),N=new Uint8ClampedArray(h,c*QF.RowLength+28,4);let f=255,j=0,D=0,w=0;B.forEach(L=>{let E;switch(L.type){case"float":E=R.getFloat32(L.offset+c*n,!0);break;case"int":E=R.getInt32(L.offset+c*n,!0);break;default:throw new Error(`Unsupported property type: ${L.type}`)}switch(L.name){case"x":g[0]=E;break;case"y":g[1]=E;break;case"z":g[2]=E;break;case"scale_0":b[0]=Math.exp(E);break;case"scale_1":b[1]=Math.exp(E);break;case"scale_2":b[2]=Math.exp(E);break;case"red":G[0]=E;break;case"green":G[1]=E;break;case"blue":G[2]=E;break;case"f_dc_0":G[0]=255*(.5+aF.SH_C0*E);break;case"f_dc_1":G[1]=255*(.5+aF.SH_C0*E);break;case"f_dc_2":G[2]=255*(.5+aF.SH_C0*E);break;case"f_dc_3":G[3]=255*(.5+aF.SH_C0*E);break;case"opacity":G[3]=1/(1+Math.exp(-E))*255;break;case"rot_0":f=E;break;case"rot_1":j=E;break;case"rot_2":D=E;break;case"rot_3":w=E}});let T=new M(j,D,w,f);switch(Q){case"polycam":{const L=g[1];g[1]=-g[2],g[2]=L,T=o.multiply(T);break}case"":break;default:throw new Error(`Unsupported format: ${Q}`)}T=T.normalize(),N[0]=128*T.w+128,N[1]=128*T.x+128,N[2]=128*T.y+128,N[3]=128*T.z+128}return h}}function lU(X,F,Q){var U=F===void 0?null:F,l=function(n,A){var B=atob(n);if(A){for(var R=new Uint8Array(B.length),h=0,o=B.length;h<o;++h)R[h]=B.charCodeAt(h);return String.fromCharCode.apply(null,new Uint16Array(R.buffer))}return B}(X,Q!==void 0&&Q),V=l.indexOf(`
`,10)+1,d=l.substring(V)+(U?"//# sourceMappingURL="+U:""),t=new Blob([d],{type:"application/javascript"});return URL.createObjectURL(t)}function XF(X,F,Q){var U;return function(l){return U=U||lU(X,F,Q),new Worker(U,l)}}var QU=XF("",null,!1);class tU{constructor(F,Q){this._scene=null,this._camera=null,this._started=!1,this._initialized=!1,this._renderer=F;const U=F.gl;this._program=U.createProgram(),this._passes=Q||[];const l=U.createShader(U.VERTEX_SHADER);U.shaderSource(l,this._getVertexSource()),U.compileShader(l),U.getShaderParameter(l,U.COMPILE_STATUS)||console.error(U.getShaderInfoLog(l));const V=U.createShader(U.FRAGMENT_SHADER);U.shaderSource(V,this._getFragmentSource()),U.compileShader(V),U.getShaderParameter(V,U.COMPILE_STATUS)||console.error(U.getShaderInfoLog(V)),U.attachShader(this.program,l),U.attachShader(this.program,V),U.linkProgram(this.program),U.getProgramParameter(this.program,U.LINK_STATUS)||console.error(U.getProgramInfoLog(this.program)),this.resize=()=>{U.useProgram(this._program),this._resize()},this.initialize=()=>{console.assert(!this._initialized,"ShaderProgram already initialized"),U.useProgram(this._program),this._initialize();for(const d of this.passes)d.initialize(this);this._initialized=!0,this._started=!0},this.render=(d,t)=>{U.useProgram(this._program),this._scene===d&&this._camera===t||(this.dispose(),this._scene=d,this._camera=t,this.initialize());for(const n of this.passes)n.render();this._render()},this.dispose=()=>{if(this._initialized){U.useProgram(this._program);for(const d of this.passes)d.dispose();this._dispose(),this._scene=null,this._camera=null,this._initialized=!1}}}get renderer(){return this._renderer}get scene(){return this._scene}get camera(){return this._camera}get program(){return this._program}get passes(){return this._passes}get started(){return this._started}}var dU=XF("",null,!1),nU=function(X={}){var F,Q,U=X;U.ready=new Promise((Z,e)=>{F=Z,Q=e});var l,V=Object.assign({},U),d="";d=(d=self.location.href).startsWith("blob:")?"":d.substr(0,d.replace(/[?#].*/,"").lastIndexOf("/")+1),l=Z=>{var e=new XMLHttpRequest;return e.open("GET",Z,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)},U.print||console.log.bind(console);var t,n,A=U.printErr||console.error.bind(console);function B(Z){if(k(Z))return function(e){for(var i=atob(e),a=new Uint8Array(i.length),W=0;W<i.length;++W)a[W]=i.charCodeAt(W);return a}(Z.slice(p.length))}Object.assign(U,V),V=null,U.arguments&&U.arguments,U.thisProgram&&U.thisProgram,U.quit&&U.quit,U.wasmBinary&&(t=U.wasmBinary);var R,h,o,c,g,b,G,N,f=!1;function j(){var Z=n.buffer;U.HEAP8=R=new Int8Array(Z),U.HEAP16=o=new Int16Array(Z),U.HEAPU8=h=new Uint8Array(Z),U.HEAPU16=c=new Uint16Array(Z),U.HEAP32=g=new Int32Array(Z),U.HEAPU32=b=new Uint32Array(Z),U.HEAPF32=G=new Float32Array(Z),U.HEAPF64=N=new Float64Array(Z)}var D,w,T=[],L=[],E=[],Y=0,FF=null,p="data:application/octet-stream;base64,",k=Z=>Z.startsWith(p);function nF(Z){return Promise.resolve().then(()=>function(e){if(e==D&&t)return new Uint8Array(t);var i=B(e);if(i)return i;if(l)return l(e);throw"both async and sync fetching of the wasm failed"}(Z))}function O(Z,e,i){return nF(Z).then(a=>WebAssembly.instantiate(a,e)).then(i,a=>{A(`failed to asynchronously prepare wasm: ${a}`),function(W){var I;(I=U.onAbort)==null||I.call(U,W),A(W="Aborted("+W+")"),f=!0,W+=". Build with -sASSERTIONS for more info.";var J=new WebAssembly.RuntimeError(W);throw Q(J),J}(a)})}k(D="data:application/octet-stream;base64,")||(w=D,D=U.locateFile?U.locateFile(w,d):d+w);var s=Z=>{for(;Z.length>0;)Z.shift()(U)};U.noExitRuntime;var S,H,u=Z=>{for(var e="",i=Z;h[i];)e+=S[h[i++]];return e},AF={},BF={},z=Z=>{throw new H(Z)};function q(Z,e,i={}){if(!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(a,W,J={}){var I=W.name;if(a||z(`type "${I}" must have a positive integer typeid pointer`),BF.hasOwnProperty(a)){if(J.ignoreDuplicateRegistrations)return;z(`Cannot register type '${I}' twice`)}if(BF[a]=W,AF.hasOwnProperty(a)){var C=AF[a];delete AF[a],C.forEach(m=>m())}}(Z,e,i)}var UF=[],_=[],iF=()=>_.length/2-5-UF.length,oF=Z=>(Z||z("Cannot use deleted val. handle = "+Z),_[Z]),YF=Z=>{switch(Z){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:{const e=UF.pop()||_.length;return _[e]=Z,_[e+1]=1,e}}};function IF(Z){return this.fromWireType(b[Z>>2])}var kF={name:"emscripten::val",fromWireType:Z=>{var e=oF(Z);return(i=>{i>9&&--_[i+1]==0&&(_[i]=void 0,UF.push(i))})(Z),e},toWireType:(Z,e)=>YF(e),argPackAdvance:8,readValueFromPointer:IF,destructorFunction:null},uF=(Z,e)=>{switch(e){case 4:return function(i){return this.fromWireType(G[i>>2])};case 8:return function(i){return this.fromWireType(N[i>>3])};default:throw new TypeError(`invalid float width (${e}): ${Z}`)}},TF=(Z,e,i)=>{switch(e){case 1:return i?a=>R[a]:a=>h[a];case 2:return i?a=>o[a>>1]:a=>c[a>>1];case 4:return i?a=>g[a>>2]:a=>b[a>>2];default:throw new TypeError(`invalid integer width (${e}): ${Z}`)}},mF=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,HF=(Z,e)=>Z?((i,a,W)=>{for(var J=a+W,I=a;i[I]&&!(I>=J);)++I;if(I-a>16&&i.buffer&&mF)return mF.decode(i.subarray(a,I));for(var C="";a<I;){var m=i[a++];if(128&m){var y=63&i[a++];if((224&m)!=192){var v=63&i[a++];if((m=(240&m)==224?(15&m)<<12|y<<6|v:(7&m)<<18|y<<12|v<<6|63&i[a++])<65536)C+=String.fromCharCode(m);else{var P=m-65536;C+=String.fromCharCode(55296|P>>10,56320|1023&P)}}else C+=String.fromCharCode((31&m)<<6|y)}else C+=String.fromCharCode(m)}return C})(h,Z,e):"",bF=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,xF=(Z,e)=>{for(var i=Z,a=i>>1,W=a+e/2;!(a>=W)&&c[a];)++a;if((i=a<<1)-Z>32&&bF)return bF.decode(h.subarray(Z,i));for(var J="",I=0;!(I>=e/2);++I){var C=o[Z+2*I>>1];if(C==0)break;J+=String.fromCharCode(C)}return J},DF=(Z,e,i)=>{if(i??(i=2147483647),i<2)return 0;for(var a=e,W=(i-=2)<2*Z.length?i/2:Z.length,J=0;J<W;++J){var I=Z.charCodeAt(J);o[e>>1]=I,e+=2}return o[e>>1]=0,e-a},fF=Z=>2*Z.length,wF=(Z,e)=>{for(var i=0,a="";!(i>=e/4);){var W=g[Z+4*i>>2];if(W==0)break;if(++i,W>=65536){var J=W-65536;a+=String.fromCharCode(55296|J>>10,56320|1023&J)}else a+=String.fromCharCode(W)}return a},MF=(Z,e,i)=>{if(i??(i=2147483647),i<4)return 0;for(var a=e,W=a+i-4,J=0;J<Z.length;++J){var I=Z.charCodeAt(J);if(I>=55296&&I<=57343&&(I=65536+((1023&I)<<10)|1023&Z.charCodeAt(++J)),g[e>>2]=I,(e+=4)+4>W)break}return g[e>>2]=0,e-a},zF=Z=>{for(var e=0,i=0;i<Z.length;++i){var a=Z.charCodeAt(i);a>=55296&&a<=57343&&++i,e+=4}return e},vF=Z=>{var e=(Z-n.buffer.byteLength+65535)/65536;try{return n.grow(e),j(),1}catch{}};(()=>{for(var Z=new Array(256),e=0;e<256;++e)Z[e]=String.fromCharCode(e);S=Z})(),H=U.BindingError=class extends Error{constructor(Z){super(Z),this.name="BindingError"}},U.InternalError=class extends Error{constructor(Z){super(Z),this.name="InternalError"}},_.push(0,1,void 0,1,null,1,!0,1,!1,1),U.count_emval_handles=iF;var KF={f:(Z,e,i,a,W)=>{},i:(Z,e,i,a)=>{q(Z,{name:e=u(e),fromWireType:function(W){return!!W},toWireType:function(W,J){return J?i:a},argPackAdvance:8,readValueFromPointer:function(W){return this.fromWireType(h[W])},destructorFunction:null})},h:Z=>q(Z,kF),e:(Z,e,i)=>{q(Z,{name:e=u(e),fromWireType:a=>a,toWireType:(a,W)=>W,argPackAdvance:8,readValueFromPointer:uF(e,i),destructorFunction:null})},b:(Z,e,i,a,W)=>{e=u(e);var J=m=>m;if(a===0){var I=32-8*i;J=m=>m<<I>>>I}var C=e.includes("unsigned");q(Z,{name:e,fromWireType:J,toWireType:C?function(m,y){return this.name,y>>>0}:function(m,y){return this.name,y},argPackAdvance:8,readValueFromPointer:TF(e,i,a!==0),destructorFunction:null})},a:(Z,e,i)=>{var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];function W(J){var I=b[J>>2],C=b[J+4>>2];return new a(R.buffer,C,I)}q(Z,{name:i=u(i),fromWireType:W,argPackAdvance:8,readValueFromPointer:W},{ignoreDuplicateRegistrations:!0})},d:(Z,e)=>{var i=(e=u(e))==="std::string";q(Z,{name:e,fromWireType(a){var W,J=b[a>>2],I=a+4;if(i)for(var C=I,m=0;m<=J;++m){var y=I+m;if(m==J||h[y]==0){var v=HF(C,y-C);W===void 0?W=v:(W+="\0",W+=v),C=y+1}}else{var P=new Array(J);for(m=0;m<J;++m)P[m]=String.fromCharCode(h[I+m]);W=P.join("")}return ZF(a),W},toWireType(a,W){var J;W instanceof ArrayBuffer&&(W=new Uint8Array(W));var I=typeof W=="string";I||W instanceof Uint8Array||W instanceof Uint8ClampedArray||W instanceof Int8Array||z("Cannot pass non-string to std::string"),J=i&&I?(P=>{for(var K=0,x=0;x<P.length;++x){var RF=P.charCodeAt(x);RF<=127?K++:RF<=2047?K+=2:RF>=55296&&RF<=57343?(K+=4,++x):K+=3}return K})(W):W.length;var C=JF(4+J+1),m=C+4;if(b[C>>2]=J,i&&I)((P,K,x,RF)=>{if(!(RF>0))return 0;for(var sF=x+RF-1,WF=0;WF<P.length;++WF){var $=P.charCodeAt(WF);if($>=55296&&$<=57343&&($=65536+((1023&$)<<10)|1023&P.charCodeAt(++WF)),$<=127){if(x>=sF)break;K[x++]=$}else if($<=2047){if(x+1>=sF)break;K[x++]=192|$>>6,K[x++]=128|63&$}else if($<=65535){if(x+2>=sF)break;K[x++]=224|$>>12,K[x++]=128|$>>6&63,K[x++]=128|63&$}else{if(x+3>=sF)break;K[x++]=240|$>>18,K[x++]=128|$>>12&63,K[x++]=128|$>>6&63,K[x++]=128|63&$}}K[x]=0})(W,h,m,J+1);else if(I)for(var y=0;y<J;++y){var v=W.charCodeAt(y);v>255&&(ZF(m),z("String has UTF-16 code units that do not fit in 8 bits")),h[m+y]=v}else for(y=0;y<J;++y)h[m+y]=W[y];return a!==null&&a.push(ZF,C),C},argPackAdvance:8,readValueFromPointer:IF,destructorFunction(a){ZF(a)}})},c:(Z,e,i)=>{var a,W,J,I;i=u(i),e===2?(a=xF,W=DF,I=fF,J=C=>c[C>>1]):e===4&&(a=wF,W=MF,I=zF,J=C=>b[C>>2]),q(Z,{name:i,fromWireType:C=>{for(var m,y=b[C>>2],v=C+4,P=0;P<=y;++P){var K=C+4+P*e;if(P==y||J(K)==0){var x=a(v,K-v);m===void 0?m=x:(m+="\0",m+=x),v=K+e}}return ZF(C),m},toWireType:(C,m)=>{typeof m!="string"&&z(`Cannot pass non-string to C++ string type ${i}`);var y=I(m),v=JF(4+y+e);return b[v>>2]=y/e,W(m,v+4,y+e),C!==null&&C.push(ZF,v),v},argPackAdvance:8,readValueFromPointer:IF,destructorFunction(C){ZF(C)}})},j:(Z,e)=>{q(Z,{isVoid:!0,name:e=u(e),argPackAdvance:0,fromWireType:()=>{},toWireType:(i,a)=>{}})},g:Z=>{var e=h.length,i=2147483648;if((Z>>>=0)>i)return!1;for(var a,W,J=1;J<=4;J*=2){var I=e*(1+.2/J);I=Math.min(I,Z+100663296);var C=Math.min(i,(a=Math.max(Z,I))+((W=65536)-a%W)%W);if(vF(C))return!0}return!1}},eF=function(){var J;var Z,e,i,a={a:KF};function W(I,C){var m;return eF=I.exports,n=eF.k,j(),m=eF.l,L.unshift(m),function(y){var P;if(Y--,(P=U.monitorRunDependencies)==null||P.call(U,Y),Y==0&&FF){var v=FF;FF=null,v()}}(),eF}if(Y++,(J=U.monitorRunDependencies)==null||J.call(U,Y),U.instantiateWasm)try{return U.instantiateWasm(a,W)}catch(I){A(`Module.instantiateWasm callback failed with error: ${I}`),Q(I)}return(Z=D,e=a,i=function(I){W(I.instance)},O(Z,e,i)).catch(Q),{}}();U._pack=(Z,e,i,a,W,J,I,C,m,y,v)=>(U._pack=eF.m)(Z,e,i,a,W,J,I,C,m,y,v);var cF,JF=U._malloc=Z=>(JF=U._malloc=eF.o)(Z),ZF=U._free=Z=>(ZF=U._free=eF.p)(Z);function gF(){function Z(){cF||(cF=!0,U.calledRun=!0,f||(s(L),F(U),U.onRuntimeInitialized&&U.onRuntimeInitialized(),function(){if(U.postRun)for(typeof U.postRun=="function"&&(U.postRun=[U.postRun]);U.postRun.length;)e=U.postRun.shift(),E.unshift(e);var e;s(E)}()))}Y>0||(function(){if(U.preRun)for(typeof U.preRun=="function"&&(U.preRun=[U.preRun]);U.preRun.length;)e=U.preRun.shift(),T.unshift(e);var e;s(T)}(),Y>0||(U.setStatus?(U.setStatus("Running..."),setTimeout(function(){setTimeout(function(){U.setStatus("")},1),Z()},1)):Z()))}if(FF=function Z(){cF||gF(),cF||(FF=Z)},U.preInit)for(typeof U.preInit=="function"&&(U.preInit=[U.preInit]);U.preInit.length>0;)U.preInit.pop()();return gF(),X.ready};class AU{constructor(F){this.dataChanged=!1,this.transformsChanged=!1,this.colorTransformsChanged=!1,this._updating=new Set,this._dirty=new Set;let Q=0,U=0;this._splatIndices=new Map,this._offsets=new Map;const l=new Map;for(const B of F.objects)B instanceof VF&&(this._splatIndices.set(B,U),this._offsets.set(B,Q),l.set(Q,B),Q+=B.data.vertexCount,U++);this._vertexCount=Q,this._width=2048,this._height=Math.ceil(2*this.vertexCount/this.width),this._data=new Uint32Array(this.width*this.height*4),this._transformsWidth=5,this._transformsHeight=l.size,this._transforms=new Float32Array(this._transformsWidth*this._transformsHeight*4),this._transformIndicesWidth=1024,this._transformIndicesHeight=Math.ceil(this.vertexCount/this._transformIndicesWidth),this._transformIndices=new Uint32Array(this._transformIndicesWidth*this._transformIndicesHeight),this._colorTransformsWidth=4,this._colorTransformsHeight=64,this._colorTransforms=new Float32Array(this._colorTransformsWidth*this._colorTransformsHeight*4),this._colorTransforms.fill(0),this._colorTransforms[0]=1,this._colorTransforms[5]=1,this._colorTransforms[10]=1,this._colorTransforms[15]=1,this._colorTransformIndicesWidth=1024,this._colorTransformIndicesHeight=Math.ceil(this.vertexCount/this._colorTransformIndicesWidth),this._colorTransformIndices=new Uint32Array(this._colorTransformIndicesWidth*this._colorTransformIndicesHeight),this.colorTransformIndices.fill(0),this._positions=new Float32Array(3*this.vertexCount),this._rotations=new Float32Array(4*this.vertexCount),this._scales=new Float32Array(3*this.vertexCount),this._worker=new dU;const V=B=>{const R=this._splatIndices.get(B);this._transforms.set(B.transform.buffer,20*R),this._transforms[20*R+16]=B.selected?1:0,B.positionChanged=!1,B.rotationChanged=!1,B.scaleChanged=!1,B.selectedChanged=!1,this.transformsChanged=!0},d=()=>{let B=!1;for(const o of this._splatIndices.keys())if(o.colorTransformChanged){B=!0;break}if(!B)return;const R=[new tF];this._colorTransformIndices.fill(0);let h=1;for(const o of this._splatIndices.keys()){const c=this._offsets.get(o);for(const g of o.colorTransforms)R.includes(g)||(R.push(g),h++);for(const g of o.colorTransformsMap.keys()){const b=o.colorTransformsMap.get(g);this._colorTransformIndices[g+c]=b+h-1}o.colorTransformChanged=!1}for(let o=0;o<R.length;o++){const c=R[o];this._colorTransforms.set(c.buffer,16*o)}this.colorTransformsChanged=!0};let t;this._worker.onmessage=B=>{if(B.data.response){const R=B.data.response,h=l.get(R.offset);V(h),d();const o=this._splatIndices.get(h);for(let c=0;c<h.data.vertexCount;c++)this._transformIndices[R.offset+c]=o;this._data.set(R.data,8*R.offset),h.data.reattach(R.positions,R.rotations,R.scales,R.colors,R.selection),this._positions.set(R.worldPositions,3*R.offset),this._rotations.set(R.worldRotations,4*R.offset),this._scales.set(R.worldScales,3*R.offset),this._updating.delete(h),h.selectedChanged=!1,this.dataChanged=!0}},async function(){t=await nU()}();const n=B=>{if(!t)return void async function(){for(;!t;)await new Promise(Y=>setTimeout(Y,0))}().then(()=>{n(B)});V(B);const R=t._malloc(3*B.data.vertexCount*4),h=t._malloc(4*B.data.vertexCount*4),o=t._malloc(3*B.data.vertexCount*4),c=t._malloc(4*B.data.vertexCount),g=t._malloc(B.data.vertexCount),b=t._malloc(8*B.data.vertexCount*4),G=t._malloc(3*B.data.vertexCount*4),N=t._malloc(4*B.data.vertexCount*4),f=t._malloc(3*B.data.vertexCount*4);t.HEAPF32.set(B.data.positions,R/4),t.HEAPF32.set(B.data.rotations,h/4),t.HEAPF32.set(B.data.scales,o/4),t.HEAPU8.set(B.data.colors,c),t.HEAPU8.set(B.data.selection,g),t._pack(B.selected,B.data.vertexCount,R,h,o,c,g,b,G,N,f);const j=new Uint32Array(t.HEAPU32.buffer,b,8*B.data.vertexCount),D=new Float32Array(t.HEAPF32.buffer,G,3*B.data.vertexCount),w=new Float32Array(t.HEAPF32.buffer,N,4*B.data.vertexCount),T=new Float32Array(t.HEAPF32.buffer,f,3*B.data.vertexCount),L=this._splatIndices.get(B),E=this._offsets.get(B);for(let Y=0;Y<B.data.vertexCount;Y++)this._transformIndices[E+Y]=L;this._data.set(j,8*E),this._positions.set(D,3*E),this._rotations.set(w,4*E),this._scales.set(T,3*E),t._free(R),t._free(h),t._free(o),t._free(c),t._free(g),t._free(b),t._free(G),t._free(N),t._free(f),this.dataChanged=!0,this.colorTransformsChanged=!0},A=B=>{if((B.positionChanged||B.rotationChanged||B.scaleChanged||B.selectedChanged)&&V(B),B.colorTransformChanged&&d(),!B.data.changed||B.data.detached)return;const R={position:new Float32Array(B.position.flat()),rotation:new Float32Array(B.rotation.flat()),scale:new Float32Array(B.scale.flat()),selected:B.selected,vertexCount:B.data.vertexCount,positions:B.data.positions,rotations:B.data.rotations,scales:B.data.scales,colors:B.data.colors,selection:B.data.selection,offset:this._offsets.get(B)};this._worker.postMessage({splat:R},[R.position.buffer,R.rotation.buffer,R.scale.buffer,R.positions.buffer,R.rotations.buffer,R.scales.buffer,R.colors.buffer,R.selection.buffer]),this._updating.add(B),B.data.detached=!0};this.getSplat=B=>{let R=null;for(const[h,o]of this._offsets){if(!(B>=o))break;R=h}return R},this.getLocalIndex=(B,R)=>R-this._offsets.get(B),this.markDirty=B=>{this._dirty.add(B)},this.rebuild=()=>{for(const B of this._dirty)A(B);this._dirty.clear()},this.dispose=()=>{this._worker.terminate()};for(const B of this._splatIndices.keys())n(B);d()}get offsets(){return this._offsets}get data(){return this._data}get width(){return this._width}get height(){return this._height}get transforms(){return this._transforms}get transformsWidth(){return this._transformsWidth}get transformsHeight(){return this._transformsHeight}get transformIndices(){return this._transformIndices}get transformIndicesWidth(){return this._transformIndicesWidth}get transformIndicesHeight(){return this._transformIndicesHeight}get colorTransforms(){return this._colorTransforms}get colorTransformsWidth(){return this._colorTransformsWidth}get colorTransformsHeight(){return this._colorTransformsHeight}get colorTransformIndices(){return this._colorTransformIndices}get colorTransformIndicesWidth(){return this._colorTransformIndicesWidth}get colorTransformIndicesHeight(){return this._colorTransformIndicesHeight}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get vertexCount(){return this._vertexCount}get needsRebuild(){return this._dirty.size>0}get updating(){return this._updating.size>0}}class pF{constructor(F=0,Q=0,U=0,l=255){this.r=F,this.g=Q,this.b=U,this.a=l}flat(){return[this.r,this.g,this.b,this.a]}flatNorm(){return[this.r/255,this.g/255,this.b/255,this.a/255]}toHexString(){return"#"+this.flat().map(F=>F.toString(16).padStart(2,"0")).join("")}toString(){return`[${this.flat().join(", ")}]`}}class yF extends tU{constructor(F,Q){super(F,Q),this._outlineThickness=10,this._outlineColor=new pF(255,165,0,255),this._renderData=null,this._depthIndex=new Uint32Array,this._splatTexture=null,this._worker=null;const U=F.canvas,l=F.gl;let V,d,t,n,A,B,R,h,o,c,g,b,G,N,f,j,D,w,T;this._resize=()=>{this._camera&&(this._camera.data.setSize(U.width,U.height),this._camera.update(),V=l.getUniformLocation(this.program,"projection"),l.uniformMatrix4fv(V,!1,this._camera.data.projectionMatrix.buffer),d=l.getUniformLocation(this.program,"viewport"),l.uniform2fv(d,new Float32Array([U.width,U.height])))};const L=()=>{this._worker=new QU,this._worker.onmessage=p=>{if(p.data.depthIndex){const{depthIndex:k}=p.data;this._depthIndex=k,l.bindBuffer(l.ARRAY_BUFFER,T),l.bufferData(l.ARRAY_BUFFER,k,l.STATIC_DRAW)}}};this._initialize=()=>{if(this._scene&&this._camera){this._resize(),this._scene.addEventListener("objectAdded",E),this._scene.addEventListener("objectRemoved",Y);for(const p of this._scene.objects)p instanceof VF&&p.addEventListener("objectChanged",FF);this._renderData=new AU(this._scene),t=l.getUniformLocation(this.program,"focal"),l.uniform2fv(t,new Float32Array([this._camera.data.fx,this._camera.data.fy])),n=l.getUniformLocation(this.program,"view"),l.uniformMatrix4fv(n,!1,this._camera.data.viewMatrix.buffer),c=l.getUniformLocation(this.program,"outlineThickness"),l.uniform1f(c,this.outlineThickness),g=l.getUniformLocation(this.program,"outlineColor"),l.uniform4fv(g,new Float32Array(this.outlineColor.flatNorm())),this._splatTexture=l.createTexture(),A=l.getUniformLocation(this.program,"u_texture"),l.uniform1i(A,0),N=l.createTexture(),B=l.getUniformLocation(this.program,"u_transforms"),l.uniform1i(B,1),f=l.createTexture(),R=l.getUniformLocation(this.program,"u_transformIndices"),l.uniform1i(R,2),j=l.createTexture(),h=l.getUniformLocation(this.program,"u_colorTransforms"),l.uniform1i(h,3),D=l.createTexture(),o=l.getUniformLocation(this.program,"u_colorTransformIndices"),l.uniform1i(o,4),w=l.createBuffer(),l.bindBuffer(l.ARRAY_BUFFER,w),l.bufferData(l.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),l.STATIC_DRAW),b=l.getAttribLocation(this.program,"position"),l.enableVertexAttribArray(b),l.vertexAttribPointer(b,2,l.FLOAT,!1,0,0),T=l.createBuffer(),G=l.getAttribLocation(this.program,"index"),l.enableVertexAttribArray(G),l.bindBuffer(l.ARRAY_BUFFER,T),L()}else console.error("Cannot render without scene and camera")};const E=p=>{const k=p;k.object instanceof VF&&k.object.addEventListener("objectChanged",FF),this.dispose()},Y=p=>{const k=p;k.object instanceof VF&&k.object.removeEventListener("objectChanged",FF),this.dispose()},FF=p=>{const k=p;k.object instanceof VF&&this._renderData&&this._renderData.markDirty(k.object)};this._render=()=>{var p,k;if(this._scene&&this._camera&&this.renderData){if(this.renderData.vertexCount!==0){if(this.renderData.needsRebuild&&this.renderData.rebuild(),this.renderData.dataChanged||this.renderData.transformsChanged||this.renderData.colorTransformsChanged){this.renderData.dataChanged&&(l.activeTexture(l.TEXTURE0),l.bindTexture(l.TEXTURE_2D,this.splatTexture),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32UI,this.renderData.width,this.renderData.height,0,l.RGBA_INTEGER,l.UNSIGNED_INT,this.renderData.data)),this.renderData.transformsChanged&&(l.activeTexture(l.TEXTURE1),l.bindTexture(l.TEXTURE_2D,N),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32F,this.renderData.transformsWidth,this.renderData.transformsHeight,0,l.RGBA,l.FLOAT,this.renderData.transforms),l.activeTexture(l.TEXTURE2),l.bindTexture(l.TEXTURE_2D,f),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.R32UI,this.renderData.transformIndicesWidth,this.renderData.transformIndicesHeight,0,l.RED_INTEGER,l.UNSIGNED_INT,this.renderData.transformIndices)),this.renderData.colorTransformsChanged&&(l.activeTexture(l.TEXTURE3),l.bindTexture(l.TEXTURE_2D,j),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32F,this.renderData.colorTransformsWidth,this.renderData.colorTransformsHeight,0,l.RGBA,l.FLOAT,this.renderData.colorTransforms),l.activeTexture(l.TEXTURE4),l.bindTexture(l.TEXTURE_2D,D),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.R32UI,this.renderData.colorTransformIndicesWidth,this.renderData.colorTransformIndicesHeight,0,l.RED_INTEGER,l.UNSIGNED_INT,this.renderData.colorTransformIndices));const nF=new Float32Array(this.renderData.positions.slice().buffer),O=new Float32Array(this.renderData.transforms.slice().buffer),s=new Uint32Array(this.renderData.transformIndices.slice().buffer);(p=this._worker)===null||p===void 0||p.postMessage({sortData:{positions:nF,transforms:O,transformIndices:s,vertexCount:this.renderData.vertexCount}},[nF.buffer,O.buffer,s.buffer]),this.renderData.dataChanged=!1,this.renderData.transformsChanged=!1,this.renderData.colorTransformsChanged=!1}this._camera.update(),(k=this._worker)===null||k===void 0||k.postMessage({viewProj:this._camera.data.viewProj.buffer}),l.viewport(0,0,U.width,U.height),l.clearColor(0,0,0,0),l.clear(l.COLOR_BUFFER_BIT),l.disable(l.DEPTH_TEST),l.enable(l.BLEND),l.blendFuncSeparate(l.ONE_MINUS_DST_ALPHA,l.ONE,l.ONE_MINUS_DST_ALPHA,l.ONE),l.blendEquationSeparate(l.FUNC_ADD,l.FUNC_ADD),l.uniformMatrix4fv(V,!1,this._camera.data.projectionMatrix.buffer),l.uniformMatrix4fv(n,!1,this._camera.data.viewMatrix.buffer),l.bindBuffer(l.ARRAY_BUFFER,w),l.vertexAttribPointer(b,2,l.FLOAT,!1,0,0),l.bindBuffer(l.ARRAY_BUFFER,T),l.bufferData(l.ARRAY_BUFFER,this.depthIndex,l.STATIC_DRAW),l.vertexAttribIPointer(G,1,l.INT,0,0),l.vertexAttribDivisor(G,1),l.drawArraysInstanced(l.TRIANGLE_FAN,0,4,this.renderData.vertexCount)}}else console.error("Cannot render without scene and camera")},this._dispose=()=>{var p;if(this._scene&&this._camera&&this.renderData){this._scene.removeEventListener("objectAdded",E),this._scene.removeEventListener("objectRemoved",Y);for(const k of this._scene.objects)k instanceof VF&&k.removeEventListener("objectChanged",FF);(p=this._worker)===null||p===void 0||p.terminate(),this.renderData.dispose(),l.deleteTexture(this.splatTexture),l.deleteTexture(N),l.deleteTexture(f),l.deleteBuffer(T),l.deleteBuffer(w)}else console.error("Cannot dispose without scene and camera")},this._setOutlineThickness=p=>{this._outlineThickness=p,this._initialized&&l.uniform1f(c,p)},this._setOutlineColor=p=>{this._outlineColor=p,this._initialized&&l.uniform4fv(g,new Float32Array(p.flatNorm()))}}get renderData(){return this._renderData}get depthIndex(){return this._depthIndex}get splatTexture(){return this._splatTexture}get outlineThickness(){return this._outlineThickness}set outlineThickness(F){this._setOutlineThickness(F)}get outlineColor(){return this._outlineColor}set outlineColor(F){this._setOutlineColor(F)}get worker(){return this._worker}_getVertexSource(){return`#version 300 es
precision highp float;
precision highp int;

uniform highp usampler2D u_texture;
uniform highp sampler2D u_transforms;
uniform highp usampler2D u_transformIndices;
uniform highp sampler2D u_colorTransforms;
uniform highp usampler2D u_colorTransformIndices;
uniform mat4 projection, view;
uniform vec2 focal;
uniform vec2 viewport;

uniform bool useDepthFade;
uniform float depthFade;

in vec2 position;
in int index;

out vec4 vColor;
out vec2 vPosition;
out float vSize;
out float vSelected;

void main () {
    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);
    float selected = float((cen.w >> 24) & 0xffu);

    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;
    mat4 transform = mat4(
        texelFetch(u_transforms, ivec2(0, transformIndex), 0),
        texelFetch(u_transforms, ivec2(1, transformIndex), 0),
        texelFetch(u_transforms, ivec2(2, transformIndex), 0),
        texelFetch(u_transforms, ivec2(3, transformIndex), 0)
    );

    if (selected < 0.5) {
        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;
    }

    mat4 viewTransform = view * transform;

    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);
    vec4 pos2d = projection * cam;

    float clip = 1.2 * pos2d.w;
    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {
        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);
        return;
    }

    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);
    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);
    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);

    mat3 J = mat3(
        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), 
        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), 
        0., 0., 0.
    );

    mat3 T = transpose(mat3(viewTransform)) * J;
    mat3 cov2d = transpose(T) * Vrk * T;

    //ref: https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/main/cuda_rasterizer/forward.cu#L110-L111
    cov2d[0][0] += 0.3;
    cov2d[1][1] += 0.3;

    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;
    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));
    float lambda1 = mid + radius, lambda2 = mid - radius;

    if (lambda2 < 0.0) return;
    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));
    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;
    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);

    uint colorTransformIndex = texelFetch(u_colorTransformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;
    mat4 colorTransform = mat4(
        texelFetch(u_colorTransforms, ivec2(0, colorTransformIndex), 0),
        texelFetch(u_colorTransforms, ivec2(1, colorTransformIndex), 0),
        texelFetch(u_colorTransforms, ivec2(2, colorTransformIndex), 0),
        texelFetch(u_colorTransforms, ivec2(3, colorTransformIndex), 0)
    );

    vec4 color = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;
    vColor = colorTransform * color;

    vPosition = position;
    vSize = length(majorAxis);
    vSelected = selected;

    float scalingFactor = 1.0;

    if (useDepthFade) {
        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;
        float near = 0.1; float far = 100.0;
        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));
        float start = max(normalizedDepth - 0.1, 0.0);
        float end = min(normalizedDepth + 0.1, 1.0);
        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);
    }

    vec2 vCenter = vec2(pos2d) / pos2d.w;
    gl_Position = vec4(
        vCenter 
        + position.x * majorAxis * scalingFactor / viewport
        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);
}
`}_getFragmentSource(){return`#version 300 es
precision highp float;

uniform float outlineThickness;
uniform vec4 outlineColor;

in vec4 vColor;
in vec2 vPosition;
in float vSize;
in float vSelected;

out vec4 fragColor;

void main () {
    float A = -dot(vPosition, vPosition);

    if (A < -4.0) discard;

    if (vSelected < 0.5) {
        float B = exp(A) * vColor.a;
        fragColor = vec4(B * vColor.rgb, B);
        return;
    }

    float outlineThreshold = -4.0 + (outlineThickness / vSize);

    if (A < outlineThreshold) {
        fragColor = outlineColor;
    } 
    else {
        float B = exp(A) * vColor.a;
        fragColor = vec4(B * vColor.rgb, B);
    }
}
`}}class BU{constructor(F=1){let Q,U,l,V,d=0,t=!1;this.initialize=n=>{if(!(n instanceof yF))throw new Error("FadeInPass requires a RenderProgram");d=n.started?1:0,t=!0,Q=n,U=n.renderer.gl,l=U.getUniformLocation(Q.program,"useDepthFade"),U.uniform1i(l,1),V=U.getUniformLocation(Q.program,"depthFade"),U.uniform1f(V,d)},this.render=()=>{var n;t&&!(!((n=Q.renderData)===null||n===void 0)&&n.updating)&&(U.useProgram(Q.program),d=Math.min(d+.01*F,1),d>=1&&(t=!1,U.uniform1i(l,0)),U.uniform1f(V,d))}}dispose(){}}class VU{constructor(F=null,Q=null){this._backgroundColor=new pF;const U=F||document.createElement("canvas");F||(U.style.display="block",U.style.boxSizing="border-box",U.style.width="100%",U.style.height="100%",U.style.margin="0",U.style.padding="0",document.body.appendChild(U)),U.style.background=this._backgroundColor.toHexString(),this._canvas=U,this._gl=U.getContext("webgl2",{antialias:!1});const l=Q||[];Q||l.push(new BU),this._renderProgram=new yF(this,l);const V=[this._renderProgram];this.resize=()=>{const d=U.clientWidth,t=U.clientHeight;U.width===d&&U.height===t||this.setSize(d,t)},this.setSize=(d,t)=>{U.width=d,U.height=t,this._gl.viewport(0,0,U.width,U.height);for(const n of V)n.resize()},this.render=(d,t)=>{for(const n of V)n.render(d,t)},this.dispose=()=>{for(const d of V)d.dispose()},this.addProgram=d=>{V.push(d)},this.removeProgram=d=>{const t=V.indexOf(d);if(t<0)throw new Error("Program not found");V.splice(t,1)},this.resize()}get canvas(){return this._canvas}get gl(){return this._gl}get renderProgram(){return this._renderProgram}get backgroundColor(){return this._backgroundColor}set backgroundColor(F){this._backgroundColor=F,this._canvas.style.background=F.toHexString()}}class ZU{constructor(F,Q,U=.5,l=.5,V=5,d=!0,t=new r){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{};let n=t.clone(),A=n.clone(),B=U,R=l,h=V,o=!1,c=!1,g=0,b=0,G=0;const N={};let f=!1;F.addEventListener("objectChanged",()=>{if(f)return;const s=F.rotation.toEuler();B=-s.y,R=-s.x;const S=F.position.x-h*Math.sin(B)*Math.cos(R),H=F.position.y+h*Math.sin(R),u=F.position.z+h*Math.cos(B)*Math.cos(R);A=new r(S,H,u)}),this.setCameraTarget=s=>{const S=s.x-F.position.x,H=s.y-F.position.y,u=s.z-F.position.z;h=Math.sqrt(S*S+H*H+u*u),R=Math.atan2(H,Math.sqrt(S*S+u*u)),B=-Math.atan2(S,u),A=new r(s.x,s.y,s.z)};const j=()=>.1+.9*(h-this.minZoom)/(this.maxZoom-this.minZoom),D=s=>{N[s.code]=!0,s.code==="ArrowUp"&&(N.KeyW=!0),s.code==="ArrowDown"&&(N.KeyS=!0),s.code==="ArrowLeft"&&(N.KeyA=!0),s.code==="ArrowRight"&&(N.KeyD=!0)},w=s=>{N[s.code]=!1,s.code==="ArrowUp"&&(N.KeyW=!1),s.code==="ArrowDown"&&(N.KeyS=!1),s.code==="ArrowLeft"&&(N.KeyA=!1),s.code==="ArrowRight"&&(N.KeyD=!1)},T=s=>{O(s),o=!0,c=s.button===2,b=s.clientX,G=s.clientY,window.addEventListener("mouseup",L)},L=s=>{O(s),o=!1,c=!1,window.removeEventListener("mouseup",L)},E=s=>{if(O(s),!o||!F)return;const S=s.clientX-b,H=s.clientY-G;if(c){const u=j(),AF=-S*this.panSpeed*.01*u,BF=-H*this.panSpeed*.01*u,z=dF.RotationFromQuaternion(F.rotation).buffer,q=new r(z[0],z[3],z[6]),UF=new r(z[1],z[4],z[7]);A=A.add(q.multiply(AF)),A=A.add(UF.multiply(BF))}else B-=S*this.orbitSpeed*.003,R+=H*this.orbitSpeed*.003,R=Math.min(Math.max(R,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);b=s.clientX,G=s.clientY},Y=s=>{O(s);const S=j();h+=s.deltaY*this.zoomSpeed*.025*S,h=Math.min(Math.max(h,this.minZoom),this.maxZoom)},FF=s=>{if(O(s),s.touches.length===1)o=!0,c=!1,b=s.touches[0].clientX,G=s.touches[0].clientY,g=0;else if(s.touches.length===2){o=!0,c=!0,b=(s.touches[0].clientX+s.touches[1].clientX)/2,G=(s.touches[0].clientY+s.touches[1].clientY)/2;const S=s.touches[0].clientX-s.touches[1].clientX,H=s.touches[0].clientY-s.touches[1].clientY;g=Math.sqrt(S*S+H*H)}},p=s=>{O(s),o=!1,c=!1},k=s=>{if(O(s),o&&F)if(c){const S=j(),H=s.touches[0].clientX-s.touches[1].clientX,u=s.touches[0].clientY-s.touches[1].clientY,AF=Math.sqrt(H*H+u*u);h+=(g-AF)*this.zoomSpeed*.1*S,h=Math.min(Math.max(h,this.minZoom),this.maxZoom),g=AF;const BF=(s.touches[0].clientX+s.touches[1].clientX)/2,z=(s.touches[0].clientY+s.touches[1].clientY)/2,q=BF-b,UF=z-G,_=dF.RotationFromQuaternion(F.rotation).buffer,iF=new r(_[0],_[3],_[6]),oF=new r(_[1],_[4],_[7]);A=A.add(iF.multiply(-q*this.panSpeed*.025*S)),A=A.add(oF.multiply(-UF*this.panSpeed*.025*S)),b=BF,G=z}else{const S=s.touches[0].clientX-b,H=s.touches[0].clientY-G;B-=S*this.orbitSpeed*.003,R+=H*this.orbitSpeed*.003,R=Math.min(Math.max(R,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),b=s.touches[0].clientX,G=s.touches[0].clientY}},nF=(s,S,H)=>(1-H)*s+H*S;this.update=()=>{f=!0,U=nF(U,B,this.dampening),l=nF(l,R,this.dampening),V=nF(V,h,this.dampening),n=n.lerp(A,this.dampening);const s=n.x+V*Math.sin(U)*Math.cos(l),S=n.y-V*Math.sin(l),H=n.z-V*Math.cos(U)*Math.cos(l);F.position=new r(s,S,H);const u=n.subtract(F.position).normalize(),AF=Math.asin(-u.y),BF=Math.atan2(u.x,u.z);F.rotation=M.FromEuler(new r(AF,BF,0));const z=.025,q=.01,UF=dF.RotationFromQuaternion(F.rotation).buffer,_=new r(-UF[2],-UF[5],-UF[8]),iF=new r(UF[0],UF[3],UF[6]);N.KeyS&&(A=A.add(_.multiply(z))),N.KeyW&&(A=A.subtract(_.multiply(z))),N.KeyA&&(A=A.subtract(iF.multiply(z))),N.KeyD&&(A=A.add(iF.multiply(z))),N.KeyE&&(B+=q),N.KeyQ&&(B-=q),N.KeyR&&(R+=q),N.KeyF&&(R-=q),f=!1};const O=s=>{s.preventDefault(),s.stopPropagation()};this.dispose=()=>{Q.removeEventListener("dragenter",O),Q.removeEventListener("dragover",O),Q.removeEventListener("dragleave",O),Q.removeEventListener("contextmenu",O),Q.removeEventListener("mousedown",T),Q.removeEventListener("mousemove",E),Q.removeEventListener("wheel",Y),Q.removeEventListener("touchstart",FF),Q.removeEventListener("touchend",p),Q.removeEventListener("touchmove",k),d&&(window.removeEventListener("keydown",D),window.removeEventListener("keyup",w))},d&&(window.addEventListener("keydown",D),window.addEventListener("keyup",w)),Q.addEventListener("dragenter",O),Q.addEventListener("dragover",O),Q.addEventListener("dragleave",O),Q.addEventListener("contextmenu",O),Q.addEventListener("mousedown",T),Q.addEventListener("mousemove",E),Q.addEventListener("wheel",Y),Q.addEventListener("touchstart",FF),Q.addEventListener("touchend",p),Q.addEventListener("touchmove",k),this.update()}}const hF=document.getElementById("canvas"),eU=document.getElementById("progress-dialog"),RU=document.getElementById("progress-indicator"),CF=new VU(hF),NF=new qF,SF=new _F,aU=new ZU(SF,hF);async function iU(){const X="/point_cloud.ply",F=await UU.LoadAsync(X,NF,V=>RU.value=V*100);eU.close();const Q=new r(Math.PI*.5,0,0);F.rotation=M.FromEuler(Q),F.applyRotation();const U=()=>{CF.setSize(hF.clientWidth,hF.clientHeight)},l=()=>{aU.update(),CF.render(NF,SF),requestAnimationFrame(l)};U(),window.addEventListener("resize",U),requestAnimationFrame(l)}iU();
